Cheat Guide - Oficina GIT

+ Criar diretório para ser o repositório
+- no windows usar na linha de comando sempre o BashShell (botão direito)
# git init && git status
# touch file.txt && git status
# git add file.txt && git status
# Edite o arquivo e git status
# git add file.txt && git status
+ Primeiro commit
# git commit -m "First commit !"
  + Mostrar o commit através do vi
  + Configuracao do user.email e user.name
  # git config --global user.email "hugo.marcondes@ifsc.edu.br"
  # git config --global user.name "Hugo Marcondes"
  + $HOME/.gitconfig
# git log [--oneline] [--graph] [—-all] [—decorate]
# git config —-global alias.clog “log -—decorate —-graph —-oneline” 
# git config —-global alias.ci “commit -a”
# git config —-global alias.st status
# git config —-global alias.co checkout
=========
++ Slides - experimentação para os alunos
# git diff
  # git diff : diff entre working tree e staging
  # git diff -cached : diff entre staging e last commit
  # git diff HEAD : diff entre working tree e last comm
=========
+ Config do Git no IDE (Eclipse e Codeblocks)
+ gitignore
=========
+ Desfazendo mudanças
# git checkout file.txt - se não foi added
+++++ Se ja added ( não muda stagged )
# git add f4.txt && git status
# git reset f4.txt && git status
+++++
# git add f4.txt
# git reset HEAD f4.txt && git status
+ the file has been unstaged.
# git checkout f4.txt
+ resets the working copy to its state at the last commit
+++++ - Se já foi commitado!
$ git add kitten.txt
$ git status
$ git commit -m "Make a change I will soon regret making"
$ git log --oneline
# you should see (at least) two commits here at this point
# copy the short form of the hash id
$ git reset --soft 53d23c4 #Não muda working
$ git log --oneline
$ git reset --hard 53d23c4 #Muda working
$ git log --oneline
=========
# git checkout <commit_id>
# git log
# git log master
=========
BRanching
# git checkout -b feature
+ Editar um arquivo
# git status
# git add file2.txt
# git commit -m "Adicionando modificacao do branch feature"
# git log --oneline
+ mostrar a troca entre os ramos
+ fazer o merge
# git checkout master
# git merge feature
# git log --oneline
+ Observacao - fast forward.
#=========
# git checkout -b conflict_branch
+ Criar um conflito
# git merge master (criar o conflito no conflict_merge)
+ verificar com git status e abrir arquivo com o conflito
+ apos resolver o conflito git add + git commit
#==========
Criar conta / repositorio no GitHUB
# git remote
# git remote add origin <remote_url>
# git push -u origin master
== Demonstrar demais comandos (pull, fetch e clone)
== COnflitos - Rebase origin
git pull --rebase origin master
# Conflict and resolve
git add <some-file>
git rebase --continue
or
git rebase --abort
========+++
Tags:
$ git tag [-a] <tag_name> [<commit_id>]
$ git push origin {<tag> | --tags}
========+++
# Submodule - https://git-scm.com/docs/git-submodule
# add a submodule
git submodule add <url> <path>
# occasionally update the submodule to a new version:
git -C <path> checkout <new version>
git add <path>
git commit -m "update submodule to new version"
# See the list of submodules in a superproject
git submodule status
---
#git submodule - https://stackoverflow.com/questions/36236484/maintaining-a-git-repo-inside-another-git-repo/36250858#36250858
#Break your big project to sub projects as you did so far.
#Now add each sub project to you main project using :
git submodule add <url>
#Once the projected is added tot your repo you have to init and update it.
git submodule init
git submodule update
#As of Git 1.8.2 new option --remote was added
git submodule update --remote --merge
#will fetch the latest changes from upstream in each submodule, merge them in, and check out the latest revision of the submodule.
---
#With version 2.13 of Git and later, --recursive has been deprecated and --recurse-submodules should be used instead:
git clone --recurse-submodules -j8 git://github.com/foo/bar.git
cd bar
#Editor’s note: -j8 is an optional performance optimization that became available in version 2.8, and fetches up to 8 submodules at a time in parallel — see man git-clone.
#With version 1.9 of Git up until version 2.12 (-j flag only available in version 2.8+):
git clone --recursive -j8 git://github.com/foo/bar.git
cd bar
#With version 1.6.5 of Git and later, you can use:
git clone --recursive git://github.com/foo/bar.git
cd bar
#For already cloned repos, or older Git versions, use:
git clone git://github.com/foo/bar.git
cd bar
git submodule update --init --recursive

Removing the last commit
To remove the last commit from git, you can simply run git reset --hard HEAD^ If you are removing multiple commits from the top, you can run git reset --hard HEAD~2 to remove the last two commits. You can increase the number to remove even more commits.

If you want to "uncommit" the commits, but keep the changes around for reworking, remove the "--hard": git reset HEAD^ which will evict the commits from the branch and from the index, but leave the working tree around.

If you want to save the commits on a new branch name, then run git branch newbranchname before doing the git reset.
